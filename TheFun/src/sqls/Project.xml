<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 

CREATE TABLE FUN_PROJECT(
   SEQ NUMBER(8) PRIMARY KEY,
   ID VARCHAR2(50) NOT NULL,
   
   FUNDTYPE VARCHAR2(50) NOT NULL, // REWARD | DONATION
   CATEGORY VARCHAR2(50) NOT NULL, // FOOD, ANIMAL, IT | ANIMAL, HUMAN
   TITLE VARCHAR2(200) NOT NULL, 
   CONTENT VARCHAR2(4000) NOT NULL,
   SUMMARY VARCHAR2(1000) NOT NULL,
   TAGS VARCHAR2(400),
   BANK VARCHAR2(200) NOT NULL,
   GOALFUND NUMBER(10) NOT NULL,
   
   SDATE DATE NOT NULL,
   EDATE DATE NOT NULL,
   PDATE DATE NOT NULL, // 결제일
   SHIPDATE DATE, // DATE로 변경  // 배송일 ==> 기부인 경우 배송이 없으므로 NOT NULL 삭제
   REGDATE DATE NOT NULL,
   
   STATUS VARCHAR2(50) NOT NULL // 1: 준비중, 2: 승인대기, 3: 진행중, 4: 완료됨(성공), 5: 완료됨(실패), 6: 삭제
);

CREATE SEQUENCE SEQ_PROJECT
START WITH 1 INCREMENT BY 1;

ALTER TABLE FUN_PROJECT ADD CONSTRAINT PROJECT_ID_FK
FOREIGN KEY(ID)
REFERENCES FUN_MEMBER(ID)
ON DELETE CASCADE; // 종속 삭제(참조하는 데이터가 삭제되면 함께 삭제)

// VIEW : 프로젝트 전체 내용 

<<<<<<< HEAD
CREATE OR REPLACE VIEW FUN_PROJECTALL (SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, STATUS, NICKNAME)
=======
CREATE OR REPLACE VIEW FUN_PROJECTALL (SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, STATUS)
>>>>>>> refs/remotes/origin/HGH
AS
SELECT P.SEQ, P.ID, P.FUNDTYPE, P.CATEGORY, P.TITLE, P.CONTENT, P.SUMMARY, P.TAGS, P.BANK, P.GOALFUND, P.SDATE, P.EDATE, P.PDATE, P.SHIPDATE, P.REGDATE,
   NVL((SELECT COUNT(*) FROM FUN_QNA  GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   NVL((SELECT COUNT(*) FROM FUN_BUY GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),   
   NVL((SELECT COUNT(*) FROM FUN_NOTICE GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   NVL((SELECT COUNT(*) FROM FUN_LIKE GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   NVL((SELECT SUM(PRICE * COUNT) FROM FUN_BUY GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   (SELECT 
    CASE 
        WHEN LOWER(STATUS) = 'waiting' THEN 'waiting'
        WHEN LOWER(STATUS) = 'delete' THEN 'delete'
        WHEN SDATE >= SYSDATE THEN 'preparing' 
        WHEN EDATE >= SYSDATE THEN 'ongoing' 
        WHEN NVL((SELECT SUM(PRICE * COUNT) FROM FUN_BUY GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0) >=  GOALFUND THEN 'complete_success'         
        ELSE 'complete_fail'  
     END AS "status" 
     FROM FUN_PROJECT WHERE SEQ = P.SEQ),
    (SELECT NICKNAME FROM FUN_MEMBER WHERE ID = P.ID)
FROM FUN_PROJECT P;

 -->

<!-- 프로젝트 -->  
<mapper namespace="Project">

<!-- 특정 프로젝트 정보 가져오기 -->
<select id="getProject" parameterType="java.lang.Integer" resultType="donzo.thefun.model.ProjectDto">
	SELECT * FROM FUN_PROJECTALL WHERE SEQ=#{seq}
</select>

<!-- detail 회사 정보 가져오기 -->
<select id="getWriter" parameterType="java.lang.Integer" resultType="donzo.thefun.model.MemberDto">
	SELECT * FROM FUN_MEMBER WHERE ID=(SELECT ID FROM FUN_PROJECT WHERE SEQ=#{seq})
</select>

<!-- 새 프로젝트 등록 후 현재 seq 받아서 리턴 -->
<insert id="newWrite" parameterType="donzo.thefun.model.ProjectDto"> 
	INSERT INTO FUN_PROJECT
	VALUES(SEQ_PROJECT.NEXTVAL, #{id},
			#{fundtype}, #{category}, 
			#{title}, #{content}, #{summary}, #{tag}, #{bank}, #{goalfund},
			TO_DATE(#{sdate}, 'yyyy-mm-dd'), TO_DATE(#{edate}, 'yyyy-mm-dd'), 
			TO_DATE(#{pdate}, 'yyyy-mm-dd'), TO_DATE(#{shipdate}, 'yyyy-mm-dd'), SYSDATE, #{status})
	<selectKey keyProperty="seq" resultType="Integer" order="AFTER"> 
		SELECT SEQ_PROJECT.CURRVAL FROM dual 
	</selectKey>
</insert> 

<!-- 프로젝트 검색 -->
<select id="searchProjectList" parameterType="donzo.thefun.model.ProjectParam" resultType="donzo.thefun.model.ProjectDto">
	SELECT SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, STATUS, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, NICKNAME
	FROM (SELECT ROW_NUMBER() OVER(ORDER BY ${s_sort} DESC) AS RNUM, 
				 SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, STATUS, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, NICKNAME                                             
		  FROM FUN_PROJECTALL
		  WHERE 1=1
		  <if test="s_type != ''">
		  AND (FUNDTYPE=LOWER(#{s_type})
		  OR  FUNDTYPE=UPPER(#{s_type}))
		  </if>
		  <if test="s_category != ''">
		  AND (CATEGORY=LOWER(#{s_category})
		  OR  CATEGORY=UPPER(#{s_category}))
		  </if>
		  <if test="s_keyword != ''">
		  AND ((FUNDTYPE LIKE '%'||LOWER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||LOWER(#{s_keyword})||'%' OR TITLE LIKE '%'||LOWER(#{s_keyword})||'%' OR CONTENT LIKE '%'||LOWER(#{s_keyword})||'%' OR TAGS LIKE '%'||LOWER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||LOWER(#{s_keyword})||'%' OR SUMMARY LIKE '%'||LOWER(#{s_keyword})||'%')
		  OR  (FUNDTYPE LIKE '%'||UPPER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||UPPER(#{s_keyword})||'%' OR TITLE LIKE '%'||UPPER(#{s_keyword})||'%' OR CONTENT LIKE '%'||UPPER(#{s_keyword})||'%' OR TAGS LIKE '%'||UPPER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||UPPER(#{s_keyword})||'%' OR SUMMARY LIKE '%'||UPPER(#{s_keyword})||'%'))
	    </if>
		  ) A
	WHERE RNUM BETWEEN #{start} AND #{end}
		  AND STATUS IN ('preparing', 'ongoing', 'complete_success', 'complete_fail')
</select>

<!-- 프로젝트 검색 결과의 개수 -->
<select id="getProjectCount" parameterType="donzo.thefun.model.ProjectParam" resultType="java.lang.Integer">
  	SELECT NVL(COUNT(*), 0) AS CNT
  	FROM FUN_PROJECTALL
  	WHERE 1=1
	<if test="s_type != ''">
	  AND (FUNDTYPE=LOWER(#{s_type})
	  OR  FUNDTYPE=UPPER(#{s_type}))
	  </if>
	  <if test="s_category != ''">
	  AND (CATEGORY=LOWER(#{s_category})
	  OR  CATEGORY=UPPER(#{s_category}))
	  </if>
	  <if test="s_keyword != ''">
	  AND ((FUNDTYPE LIKE '%'||LOWER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||LOWER(#{s_keyword})||'%' OR TITLE LIKE '%'||LOWER(#{s_keyword})||'%' OR CONTENT LIKE '%'||LOWER(#{s_keyword})||'%' OR TAGS LIKE '%'||LOWER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||LOWER(#{s_keyword})||'%' OR SUMMARY LIKE '%'||LOWER(#{s_keyword})||'%')
	  OR  (FUNDTYPE LIKE '%'||UPPER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||UPPER(#{s_keyword})||'%' OR TITLE LIKE '%'||UPPER(#{s_keyword})||'%' OR CONTENT LIKE '%'||UPPER(#{s_keyword})||'%' OR TAGS LIKE '%'||UPPER(#{s_keyword})||'%' OR CATEGORY LIKE '%'||UPPER(#{s_keyword})||'%' OR SUMMARY LIKE '%'||UPPER(#{s_keyword})||'%'))
    </if> 
    AND STATUS IN ('preparing', 'ongoing', 'complete_success', 'complete_fail')
</select>

<!-- 내 일정 찾기 -->
<!--
<select id="mySchedule" parameterType="donzo.thefun.model.ProjectDto" resultType="donzo.thefun.model.ProjectDto">
	SELECT SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, 
			SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, 
			FUNDACHIVED, STATUS
	FROM FUN_PROJECTALL
	WHERE ID=#{id}	
</select>
 -->

<!-- WHERE 1=1
			  <if test="s_type != '' and s_type != null and s_category != '' and s_category != null and s_keyword != '' and s_keyword != null">
			  AND (TITLE LIKE '%'||#{s_keyword}||'%' OR CONTENT LIKE '%'||#{s_keyword}||'%' OR TAGS LIKE '%'||#{s_keyword}||'%' OR CATEGORY LIKE '%'||#{s_keyword}||'%')
			  	<if test="s_category == 'food'">
			  		AND CATEGORY = 'food'
			  	</if>
			  	<if test="s_category == 'it'">
			  		AND CATEGORY = 'it'
			  	</if>
			  	<if test="s_category == 'animal'">
			  		AND CATEGORY = 'animal'
			  	</if>
			  	<if test="s_category == 'human'">
			  		AND CATEGORY = 'human'
			  	</if>
			  </if>) A
			   -->
<!--
<select id="getBbsPagingList" parameterType="kh.com.c.model.BbsParam" resultType="kh.com.c.model.BbsDto">
  	SELECT 	SEQ, ID, REF, STEP, DEPTH, TITLE, CONTENT, WDATE, PARENT, DEL, READCOUNT
	FROM	(SELECT ROW_NUMBER() OVER(ORDER BY REF DESC, STEP ASC) AS RNUM,
			SEQ, ID, REF, STEP, DEPTH,
			TITLE, CONTENT, WDATE, PARENT,
			DEL, READCOUNT
			FROM BBS
			WHERE 1=1
			<if test="s_category != '' and s_category != null and s_keyword != '' and s_keyword != null">
				<if test="s_category == 'title'">
					AND TITLE LIKE '%'||#{s_keyword}||'%'
				</if>
				<if test="s_category == 'contents'">
					AND CONTENT LIKE '%'||#{s_keyword}||'%'
				</if>
			</if>) A
	WHERE RNUM BETWEEN ${start} AND ${end}
	ORDER BY SEQ DESC
</select>
-->

</mapper>