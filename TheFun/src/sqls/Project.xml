<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 

CREATE TABLE FUN_PROJECT(
   SEQ NUMBER(8) PRIMARY KEY,
   ID VARCHAR2(50) NOT NULL,
   
   FUNDTYPE VARCHAR2(50) NOT NULL, // REWARD | DONATION
   CATEGORY VARCHAR2(50) NOT NULL, // FOOD, ANIMAL, IT | ANIMAL, HUMAN
   TITLE VARCHAR2(200) NOT NULL, 
   CONTENT VARCHAR2(4000) NOT NULL,
   SUMMARY VARCHAR2(1000) NOT NULL,
   TAGS VARCHAR2(400),
   BANK VARCHAR2(200) NOT NULL,
   GOALFUND NUMBER(10) NOT NULL,
   
   SDATE DATE NOT NULL,
   EDATE DATE NOT NULL,
   PDATE DATE NOT NULL, // 결제일
   SHIPDATE DATE, // DATE로 변경  // 배송일 ==> 기부인 경우 배송이 없으므로 NOT NULL 삭제
   REGDATE DATE NOT NULL,
   
   STATUS VARCHAR2(50) NOT NULL // 1: 준비중, 2: 승인대기, 3: 진행중, 4: 완료됨(성공), 5: 완료됨(실패), 6: 삭제
);

CREATE SEQUENCE SEQ_PROJECT
START WITH 1 INCREMENT BY 1;

ALTER TABLE FUN_PROJECT ADD CONSTRAINT PROJECT_ID_FK
FOREIGN KEY(ID)
REFERENCES FUN_MEMBER(ID)
ON DELETE CASCADE; // 종속 삭제(참조하는 데이터가 삭제되면 함께 삭제)

// VIEW : 프로젝트 전체 내용 

CREATE OR REPLACE VIEW FUN_PROJECTALL (SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, STATUS, NICKNAME, OPTIONTOTAL, REVIEWCOUNT)
AS
SELECT P.SEQ, P.ID, P.FUNDTYPE, P.CATEGORY, P.TITLE, P.CONTENT, P.SUMMARY, P.TAGS, P.BANK, P.GOALFUND, P.SDATE, P.EDATE, P.PDATE, P.SHIPDATE, P.REGDATE,
   NVL((SELECT COUNT(*) FROM FUN_QNA  GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   NVL((SELECT COUNT(DISTINCT ID) FROM FUN_BUY GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),      
   NVL((SELECT COUNT(*) FROM FUN_NOTICE GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   NVL((SELECT COUNT(*) FROM FUN_LIKE GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),0),
   (SELECT SUM(NVL(B.PRICE,(SELECT PRICE FROM FUN_OPTION WHERE SEQ = B.OPTIONSEQ)) * B.COUNT) FROM FUN_BUY B GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ),
   (SELECT 
    CASE 
        WHEN LOWER(STATUS) = 'waiting' THEN 'waiting'
        WHEN LOWER(STATUS) = 'delete' THEN 'delete'
        WHEN LOWER(STATUS) = 'reject' THEN 'reject'
        WHEN LOWER(STATUS) = 'revise' THEN 'revise'
        WHEN SDATE >= SYSDATE THEN 'preparing' 
        WHEN EDATE-SYSDATE >= 0 THEN 'ongoing' 
        WHEN (SELECT SUM(NVL(B.PRICE,(SELECT PRICE FROM FUN_OPTION WHERE SEQ = B.OPTIONSEQ)) * B.COUNT) FROM FUN_BUY B GROUP BY PROJECTSEQ HAVING PROJECTSEQ = P.SEQ) >=  GOALFUND THEN 'complete_success'         
        ELSE 'complete_fail'  
     END AS "status" 
     FROM FUN_PROJECT WHERE SEQ = P.SEQ),
    (SELECT NICKNAME FROM FUN_MEMBER WHERE ID = P.ID),
    NVL((SELECT COUNT(*) FROM FUN_OPTION WHERE PROJECTSEQ = P.SEQ),0),
    (SELECT COUNT(*) FROM FUN_BUY WHERE PROJECTSEQ= P.SEQ AND NVL(SCORE,0)>0)
FROM FUN_PROJECT P;

 -->

<!-- 프로젝트 -->  
<mapper namespace="Project">

<!-- 특정 프로젝트 정보 가져오기 -->
<select id="getProject" parameterType="java.lang.Integer" resultType="donzo.thefun.model.ProjectDto">
	SELECT * FROM FUN_PROJECTALL WHERE SEQ=#{seq}
</select>

<!-- detail 회사 정보 가져오기 -->
<select id="getWriter" parameterType="java.lang.Integer" resultType="donzo.thefun.model.MemberDto">
	SELECT * FROM FUN_MEMBER WHERE ID=(SELECT ID FROM FUN_PROJECT WHERE SEQ=#{seq})
</select>

<!-- 새 프로젝트 등록 후 현재 seq 받아서 리턴 : 주의! keyProperty에 seq는 parameter로 들어온 dto에 seq변수에 값을 넣어준다는 의미다. 따라서 값을 찾을때는 getSeq로 찾아야 올바른 값을 얻을 수 있다. -->
<insert id="newWrite" parameterType="donzo.thefun.model.ProjectDto">
	INSERT INTO FUN_PROJECT (SEQ, ID, FUNDTYPE, CATEGORY, TITLE, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, STATUS, CONTENT)
	VALUES(SEQ_PROJECT.NEXTVAL, #{id},
			#{fundtype}, #{category}, 
			#{title}, #{summary}, #{tag}, #{bank}, #{goalfund},
			TO_DATE(#{sdate}, 'yyyy-mm-dd'), TO_DATE(#{edate}, 'yyyy-mm-dd hh24:mi:ss'), 
			TO_DATE(#{pdate}, 'yyyy-mm-dd'), TO_DATE(#{shipdate}, 'yyyy-mm-dd'), SYSDATE, 
			#{status}, #{content})
	<selectKey keyProperty="seq" resultType="Integer" order="AFTER"> 
		SELECT SEQ_PROJECT.CURRVAL FROM dual
	</selectKey>
</insert>

<!-- 내 프로젝트 내용 수정 -->
<update id="updateProject" parameterType="donzo.thefun.model.ProjectDto">
	UPDATE FUN_PROJECT
	SET SDATE=TO_DATE(#{sdate}, 'yyyy-mm-dd'),
		EDATE=TO_DATE(#{edate}, 'yyyy-mm-dd hh24:mi:ss'),
		PDATE=TO_DATE(#{pdate}, 'yyyy-mm-dd'),
		SHIPDATE=TO_DATE(#{shipdate}, 'yyyy-mm-dd'),
		FUNDTYPE=#{fundtype}, CATEGORY=#{category}, TITLE=#{title}, SUMMARY=#{summary}, TAGS=#{tag}, Bank=#{bank}, GOALFUND=#{goalfund},
		STATUS='waiting'		
	WHERE SEQ=#{seq}
</update>

<!-- 내 프로젝트 삭제(승지) : 실제 삭제는 안하고 status만 delete로 바꿈 -->
<update id="deleteProject" parameterType="java.lang.Integer">
	UPDATE FUN_PROJECT
	SET STATUS= 'delete'
	WHERE SEQ=#{seq}
</update>

<!-- 승인 대기중이 프로젝트 목록 가져오기 - 관리자 모드 -->
<!-- <select id="getWaitingList" resultType="donzo.thefun.model.ProjectDto">
	SELECT * 
	FROM FUN_PROJECTALL 
	WHERE LOWER(STATUS) = 'waiting'
	ORDER BY REGDATE DESC 
</select> -->

<!-- 페이징 추가한 승인 대기 프로젝트 목록 -->
<select id="getWaitingPagingList" parameterType="donzo.thefun.model.pageParam" resultType="donzo.thefun.model.ProjectDto">
	SELECT SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, 
				SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, 
				FUNDACHIVED, STATUS, NICKNAME
	FROM 
		(SELECT ROW_NUMBER() OVER(ORDER BY REGDATE DESC) AS RNUM, 
				SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, 
				SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, 
				FUNDACHIVED, STATUS, NICKNAME
		 FROM FUN_PROJECTALL
		 WHERE LOWER(STATUS) = 'waiting'
		 ) A
	WHERE RNUM BETWEEN ${start} AND ${end}
</select>

<!-- 승인 대기중인 프로젝트의 갯수 -->
<select id="getWaitCount" resultType="int">
	SELECT COUNT(*)
	FROM FUN_PROJECTALL
	WHERE LOWER(STATUS)='waiting'	
</select>

<!-- 새 프로젝트 승인 -->
<update id="approveProject" parameterType="int"> 
	UPDATE FUN_PROJECT
	SET STATUS='approve' <!-- 의미 없지만 승인되었다는 의미로, preparing과 구분하는 의미로 넣어놓음 -->
	WHERE SEQ = #{projectseq}
</update>
 
<!-- 새 프로젝트 승인 거절 -->
<update id="rejectProject" parameterType="donzo.thefun.model.ProjectDto"> 
	UPDATE FUN_PROJECT
	SET STATUS= #{status}
	WHERE SEQ = #{seq}
</update> 

<!-- 프로젝트 검색 -->
<select id="searchProjectList" parameterType="donzo.thefun.model.ProjectParam" resultType="donzo.thefun.model.ProjectDto">
	SELECT SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, STATUS, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, NICKNAME
	FROM (SELECT ROW_NUMBER() OVER(ORDER BY ${s_sort} ${s_asc_desc}, FUNDACHIVED DESC ) AS RNUM, 
				 SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, SDATE, EDATE, PDATE, SHIPDATE, REGDATE, STATUS, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, FUNDACHIVED, NICKNAME                                              
		  FROM FUN_PROJECTALL
		  WHERE 1=1
		  <if test="s_complete == 'complete'">
		  AND LOWER(STATUS) IN ('complete_success', 'complete_fail')
		  </if>
		  <if test="s_complete == ''">
		  AND LOWER(STATUS) IN ('preparing', 'ongoing')
		  </if>
		  <if test="s_type != ''">
		  AND (LOWER(FUNDTYPE)=LOWER(#{s_type}))
		  </if>
		  <if test="s_category != ''">
		  AND (LOWER(CATEGORY)=LOWER(#{s_category}))
		  </if>
		  <if test="s_keyword != ''">
		  AND (LOWER(NICKNAME) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(FUNDTYPE) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(CATEGORY) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(TITLE) LIKE '%'||LOWER(#{s_keyword})||'%' OR CONTENT LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(TAGS) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(CATEGORY) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(SUMMARY) LIKE '%'||LOWER(#{s_keyword})||'%')
	   	  </if>
	   	  <if test="s_condition != ''">
		 	 <if test="s_condition == 'reg_seven_date'">
		 	 	AND (REGDATE BETWEEN SYSDATE-7 AND SYSDATE)
		 	 </if>
		 	 <if test="s_condition == 'end_seven_date'">
		 	 	AND (SYSDATE BETWEEN EDATE-7 AND EDATE)
		 	 </if>
		 </if>
		  ) A		 
	WHERE RNUM BETWEEN #{start} AND #{end}
</select>

<!-- 프로젝트 검색 결과의 개수 -->
<select id="getProjectCount" parameterType="donzo.thefun.model.ProjectParam" resultType="java.lang.Integer">
  	SELECT NVL(COUNT(*), 0) AS CNT
  	FROM FUN_PROJECTALL
  	WHERE 1=1
  	<if test="s_complete == 'complete'">
	AND LOWER(STATUS) IN ('complete_success', 'complete_fail')
	</if>
	<if test="s_complete == ''">
	AND LOWER(STATUS) IN ('preparing', 'ongoing')
	</if>
	<if test="s_type != ''">
	AND (LOWER(FUNDTYPE)=LOWER(#{s_type}))
	</if>
	<if test="s_category != ''">
	AND (LOWER(CATEGORY)=LOWER(#{s_category}))
	</if>
	<if test="s_keyword != ''">
	AND (LOWER(NICKNAME) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(FUNDTYPE) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(CATEGORY) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(TITLE) LIKE '%'||LOWER(#{s_keyword})||'%' OR CONTENT LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(TAGS) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(CATEGORY) LIKE '%'||LOWER(#{s_keyword})||'%' OR LOWER(SUMMARY) LIKE '%'||LOWER(#{s_keyword})||'%')
   	</if>
   	<if test="s_condition != ''">
		<if test="s_condition == 'reg_seven_date'">
			AND (REGDATE BETWEEN SYSDATE-7 AND SYSDATE)
		</if>
		<if test="s_condition == 'end_seven_date'">
			AND (SYSDATE BETWEEN EDATE-7 AND EDATE)
		</if>
	</if>
</select>

<!-- 내 일정 찾기 : 등록한 프로젝트 -->
<select id="mySchedule" parameterType="java.lang.String" resultType="donzo.thefun.model.ProjectDto">
	SELECT SEQ, ID, FUNDTYPE, CATEGORY, TITLE, CONTENT, SUMMARY, TAGS, BANK, GOALFUND, 
				SDATE, EDATE, PDATE, SHIPDATE, REGDATE, QNACOUNT, BUYCOUNT, NOTICECOUNT, LIKECOUNT, 
				FUNDACHIVED, STATUS, NICKNAME
	FROM FUN_PROJECTALL
	WHERE ID=#{id}	
	ORDER BY REGDATE DESC, SDATE ASC
</select>

<!-- 내 프로젝트 정보 전부 가져오기(승지 : 통계구현) -->
<select id="myAllProject" parameterType="java.lang.String" resultType="donzo.thefun.model.ProjectDto">
	SELECT * FROM FUN_PROJECTALL WHERE ID=#{id}
</select>

<!-- 판매자의 프로젝트리스트 -->
<select id="getProjectList" resultType="donzo.thefun.model.ProjectDto">
	SELECT * 
	FROM FUN_PROJECTALL
	WHERE ID=#{id}
</select>


<!-- 상태에 따른 요약 건 수 -->
<select id="getStatusCount" parameterType="donzo.thefun.model.StatCountParam" resultType="java.lang.Integer">
	SELECT COUNT(*)
	FROM FUN_PROJECTALL
	WHERE ID=#{id}
	<choose>
	<when test="status == 'waiting'">
	</when>
	<otherwise>
		AND LOWER(STATUS)=LOWER(#{status})
	</otherwise>
	</choose>
</select>

</mapper>