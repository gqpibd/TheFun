<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- CREATE TABLE FUN_BUY( 
   SEQ NUMBER(8) PRIMARY KEY, 
   ID VARCHAR2(50) NOT NULL,
   
   PROJECTSEQ NUMBER(8) NOT NULL,
   OPTIONSEQ NUMBER(8),  // 기부인 경우는 OPTION이 없음
   
   COUNT NUMBER(8) NOT NULL,
   REGDATE DATE NOT NULL,
   
   // 배송지 정보
   NAME VARCHAR2(50),
   PHONE VARCHAR2(50),
   POSTCODE VARCHAR2(10),
   ROADADDRESS VARCHAR2(100),
   DETAILADDRESS VARCHAR2(100),   

   // 후기 + 별점..
   SCORE NUMBER(2), 
   BCOMMENT VARCHAR2(1000) ,
   
   //결제정보 및 가격 나중에 추가됨
   CARDNUMBER VARCHAR2(50),
   BANKNAME VARCHAR2(50),
   PRICE NUMBER,
   USERPOINT NUMBER
);

CREATE SEQUENCE SEQ_BUY
START WITH 1
INCREMENT BY 1;

ALTER TABLE FUN_BUY ADD CONSTRAINT BUY_PROJECTSEQ_FK
FOREIGN KEY(PROJECTSEQ)
REFERENCES FUN_PROJECT(SEQ)
ON DELETE CASCADE; 

ALTER TABLE FUN_BUY ADD CONSTRAINT BUY_OPTIONSEQ_FK
FOREIGN KEY(OPTIONSEQ)
REFERENCES FUN_OPTION(SEQ)
ON DELETE CASCADE; 

ALTER TABLE FUN_BUY ADD CONSTRAINT BUY_ID_FK
FOREIGN KEY(ID)
REFERENCES FUN_MEMBER(ID)
ON DELETE CASCADE; 

CREATE OR REPLACE VIEW FUN_BUY_VIEW (SEQ, ID, PROJECTSEQ, OPTIONSEQ, COUNT, REGDATE, SCORE, BCOMMENT, NAME, PHONE, POSTCODE, ROADADDRESS, DETAILADDRESS, CARDNUMBER, BANKNAME, USEPOINT, PTITLE, OTITLE, OCONTENT, STATUS, PRICE, PDATE, SHIPDATE)
AS
SELECT B.SEQ, B.ID, B.PROJECTSEQ, B.OPTIONSEQ, B.COUNT, B.REGDATE, B.SCORE, B.BCOMMENT, B.NAME, B.PHONE, B.POSTCODE, B.ROADADDRESS, B.DETAILADDRESS, B.CARDNUMBER, B.BANKNAME, B.USEPOINT,
    (SELECT TITLE FROM FUN_PROJECT WHERE SEQ = B.PROJECTSEQ),
    (SELECT TITLE FROM FUN_OPTION WHERE SEQ = B.OPTIONSEQ),
    (SELECT CONTENT FROM FUN_OPTION WHERE SEQ= B.OPTIONSEQ),    
    (SELECT 
     CASE 
        WHEN LOWER(STATUS) = 'finish' THEN 'finish'        
        ELSE (SELECT STATUS FROM FUN_PROJECTALL WHERE SEQ = B.PROJECTSEQ)
     END AS "status" 
     FROM FUN_BUY
     WHERE SEQ=B.SEQ),
    NVL(B.PRICE,(SELECT PRICE FROM FUN_OPTION WHERE SEQ = B.OPTIONSEQ)),
    (SELECT PDATE FROM FUN_PROJECT WHERE SEQ=B.PROJECTSEQ),
    (SELECT SHIPDATE FROM FUN_PROJECT WHERE SEQ=B.PROJECTSEQ)
FROM FUN_BUY B;
 -->

<!-- 구매자 -->  
<mapper namespace="Buy">

<!-- 내 후원내역 --><!-- 기왕이면 닉네임으로 가져오자 -->
<!-- <select id="myOrderList" parameterType="donzo.thefun.model.BuyDto" resultType="donzo.thefun.model.BuyDto">
		SELECT 
		B.SEQ, M.NICKNAME AS ID, B.PROJECTSEQ, B.COUNT, B.REGDATE, B.BCOMMENT, B.PTITLE, B.OTITLE, B.STATUS, B.PRICE, B.PDATE   
		FROM FUN_BUY_VIEW B, FUN_PROJECT P, FUN_MEMBER M
		WHERE B.ID=#{id} AND B.PROJECTSEQ=P.SEQ AND M.ID=P.ID
		ORDER BY B.REGDATE DESC
</select>  -->
 
<!-- 내 주문내역 목록 paging --> <!-- ORDER BY B.REGDATE DESC B.SEQ DESC: 나중에 주문한게 위에 오게 하려고 -->
<select id="orderPageList" parameterType="donzo.thefun.model.pageparam.buyParam" resultType="donzo.thefun.model.BuyDto">
	SELECT SEQ, ID, PROJECTSEQ, COUNT, REGDATE, BCOMMENT, PTITLE, OTITLE, STATUS, PRICE, PDATE
	FROM 
		(SELECT RANK() OVER(ORDER BY B.REGDATE DESC, B.SEQ DESC) AS RANK, 
				B.SEQ, M.NICKNAME AS ID, B.PROJECTSEQ, B.COUNT, B.REGDATE, B.BCOMMENT, B.PTITLE, B.OTITLE, B.STATUS, B.PRICE, B.PDATE
		 FROM FUN_BUY_VIEW B, FUN_PROJECT P, FUN_MEMBER M	
		 WHERE B.ID=#{o_id} AND B.PROJECTSEQ=P.SEQ AND M.ID=P.ID AND B.STATUS != 'delete' AND B.ROWID IN (SELECT MAX(ROWID) FROM FUN_BUY GROUP BY PROJECTSEQ, REGDATE)
		 ) A
	WHERE RANK BETWEEN ${start} AND ${end}
	ORDER BY REGDATE DESC, SEQ DESC
</select>
<!-- AND ROWID IN (SELECT MAX(ROWID) FROM FUN_BUY GROUP BY REGDATE) -->

<select id="getOrderCount"	parameterType="donzo.thefun.model.pageparam.buyParam"	resultType="java.lang.Integer">
	SELECT NVL(COUNT(*), 0) AS CNT
	FROM FUN_BUY_VIEW
	WHERE ID=#{o_id} AND STATUS != 'delete' AND ROWID IN (SELECT MAX(ROWID) FROM FUN_BUY GROUP BY PROJECTSEQ, REGDATE)
</select>

<!-- 우선은 아이디가 안 맞아서 빼놓음. 수정할 것 -->
<select id="getBuyGroupInfo"	parameterType="donzo.thefun.model.BuyDto"	resultType="donzo.thefun.model.BuyGroupParam">
	SELECT COUNT(*) GROUPCOUNT, SUM(PRICE*COUNT) TOTALPRICE, SUM(COUNT) TOTALCOUNT
	FROM FUN_BUY_VIEW
	WHERE STATUS != 'delete'AND PROJECTSEQ = #{projectseq}
	GROUP BY REGDATE
	HAVING TO_CHAR(REGDATE,'YYYY-MM-DD HH24:MI:SS') = SUBSTR(#{regdate},0,19) 
</select>

<!-- 리워드 주문 추가 -->
<insert id="addOrders" parameterType="donzo.thefun.model.BuyDto">
   INSERT INTO FUN_BUY (SEQ, ID, PROJECTSEQ, COUNT, REGDATE, NAME, PHONE, CARDNUMBER, BANKNAME, OPTIONSEQ, POSTCODE, ROADADDRESS, DETAILADDRESS)
   VALUES(SEQ_BUY.NEXTVAL,#{id},#{projectseq},#{count},SYSDATE,#{name},#{phone},#{cardNumber},#{bankName},
          #{optionseq},#{postcode},#{roadaddress},#{detailaddress}
   )
</insert>

<!-- 기부하기 -->
<insert id="addDonation" parameterType="donzo.thefun.model.BuyDto">
   INSERT INTO FUN_BUY (SEQ, ID, PROJECTSEQ, COUNT, REGDATE, PHONE, CARDNUMBER, BANKNAME, PRICE, USEPOINT)
   VALUES(SEQ_BUY.NEXTVAL,#{id},#{projectseq},1,SYSDATE,#{phone},#{cardNumber},#{bankName},#{price},#{usepoint})
</insert>

<!-- 후기, 별점 등록 -->
<insert id="addReview" parameterType="donzo.thefun.model.BuyDto">
	UPDATE FUN_BUY
	SET SCORE = ${score}
	<if test="bcomment != null">
		, BCOMMENT = #{bcomment}
	</if>
	WHERE SEQ = ${seq}
</insert>
<!-- replace(B.OCONTENT,CHR(13)||CHR(10),'/') -->
<!-- 특정 프로젝트의 후기 목록 불러오기 -->
<select id="selectReviewList" parameterType="java.lang.Integer" resultType="donzo.thefun.model.BuyDto">
	SELECT SEQ, ID, REGDATE, OTITLE, OCONTENT, SCORE, BCOMMENT
	FROM FUN_BUY_VIEW
	WHERE PROJECTSEQ = #{seq} AND SCORE IS NOT NULL	
</select>

<!-- 내 후원 상세내역   -->
<select id="orderDetailList" parameterType="donzo.thefun.model.BuyDto" resultType="donzo.thefun.model.BuyDto">
	SELECT * 
	FROM FUN_BUY_VIEW 
	WHERE PROJECTSEQ=#{projectseq} AND ID=#{id} AND REGDATE=TO_DATE(#{regdate},'yyyy-mm-dd hh24:mi:ss')
</select>

<!-- SELECT ROW_NUMBER() OVER(ORDER BY REGDATE DESC) AS RNUM, SEQ, ID, PROJECTSEQ, OPTIONSEQ, COUNT, PRICE, REGDATE, SCORE, BCOMMENT, PTITLE, OTITLE, OCONTENT, STATUS, NAME, PHONE, POSTCODE, ROADADDRESS, DETAILADDRESS, CARDNUMBER, BANKNAME, PDATE, SHIPDATE, USEPOINT 
		FROM FUN_BUY_VIEW
		WHERE PROJECTSEQ = #{projectseq_participant}
		AND STATUS != 'delete' -->
		
<!-- 참여현황 -->
<select id="participant_List" parameterType="donzo.thefun.model.pageparam.participantParam" resultType="donzo.thefun.model.BuyDto">
	SELECT SEQ, ID, PROJECTSEQ, OPTIONSEQ, COUNT, PRICE, REGDATE, SCORE, BCOMMENT, PTITLE, OTITLE, OCONTENT, STATUS, NAME, PHONE, POSTCODE, ROADADDRESS, DETAILADDRESS, CARDNUMBER, BANKNAME, PDATE, SHIPDATE, USEPOINT
	FROM (SELECT DISTINCT ROW_NUMBER() OVER(ORDER BY B.REGDATE DESC) AS RNUM, 
				B.SEQ, M.NICKNAME AS ID, B.PROJECTSEQ, B.OPTIONSEQ, B.COUNT, B.PRICE, B.REGDATE, B.SCORE, B.BCOMMENT, B.PTITLE, B.OTITLE, B.OCONTENT, B.STATUS, B.NAME, B.PHONE, B.POSTCODE, B.ROADADDRESS, B.DETAILADDRESS, B.CARDNUMBER, B.BANKNAME, B.PDATE, B.SHIPDATE, B.USEPOINT
		 FROM FUN_BUY_VIEW B, FUN_MEMBER M	
		 WHERE B.PROJECTSEQ=#{projectseq} AND M.ID=B.ID
		 AND B.STATUS != 'delete'
		 ORDER BY REGDATE DESC
		) A
	WHERE RNUM BETWEEN ${start} AND ${end}
</select>

<!-- 참여 카운트 -->
<select id="getParticipantCount" parameterType="donzo.thefun.model.pageparam.participantParam" resultType="java.lang.Integer">
	SELECT NVL(COUNT(*), 0) AS CNT
	FROM FUN_BUY_VIEW B, FUN_MEMBER M
	WHERE B.PROJECTSEQ=#{projectseq} AND M.ID=B.ID
	AND B.STATUS != 'delete'
</select>

<!-- 구매 삭제 -->
<delete id="deleteBuy" parameterType="java.lang.Integer">
	DELETE FROM FUN_BUY WHERE SEQ=#{seq}
</delete>

<!-- 배송완료, 기부완료 -->
<update id="finishFunding" parameterType="java.lang.Integer">
	UPDATE FUN_BUY
	SET STATUS = 'finish'
	WHERE SEQ = #{seq}	
</update>

<!-- 기부에 대해 포인트 지급 -->
<update id="givePoint" parameterType="donzo.thefun.model.BuyDto">
	UPDATE FUN_MEMBER
	SET POINT = NVL(POINT,0) + (SELECT ROUND((PRICE-NVL(USEPOINT,0))*0.01) FROM FUN_BUY WHERE SEQ = #{seq})
	WHERE ID = #{id}	
</update>

<!-- 주문 상세내역 -->
<select id="getBuyDetail" parameterType="java.lang.Integer" resultType="donzo.thefun.model.BuyDto">
	SELECT * 
	FROM FUN_BUY_VIEW
	WHERE SEQ = #{seq}
</select>

</mapper>